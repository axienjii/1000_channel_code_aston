function align_resting_state(date)
%Written by Xing 18/7/17
%Read events from NEV files, check that they are identical across
%instances. Also reads in code that was generated by a Matlab script,
%sync_pulse_resting_state.m, to check that the same sequence is present.
%The precise length of the sequences may differ slightly between the MAT
%and NEV files, as the NEV file may contain a few extra numbers before
%and/or after the shared sequence.
% date='180717_resting_state';
% date='200717_resting_state';
% date='210717_resting_state';
% date='260717_resting_state';
% date='250717_resting_state';
% date='090817_resting_state';
% date='100817_resting_state';
for instanceInd=1:8
    instanceName=['instance',num2str(instanceInd)];
    instanceNEVFileName=['X:\best\',date,'\',instanceName,'.nev'];
    NEV=openNEV(instanceNEVFileName);
    events{instanceInd}=NEV.Data.SerialDigitalIO.UnparsedData;
end
for instanceInd=1:8-1
    identicalEvents(instanceInd)=isequal(events{instanceInd},events{instanceInd+1});
end
if sum(identicalEvents)~=7
    for instanceInd=1:8
        lengthEventsInstances(instanceInd)=length(events{instanceInd});
    end
    [minLength ind]=min(lengthEventsInstances);%find the number of encodes present for the instance that has the fewest encodes
    for instanceInd=1:8-1%check that for the minimum length of encodes, the encodes are identical across instances
        identicalInitialEvents(instanceInd)=isequal(events{instanceInd}(1:minLength),events{instanceInd+1}(1:minLength));
    end
    if sum(identicalInitialEvents)~=7
        sprintf('Events are not identical across instances. Check and debug.')
    elseif sum(identicalInitialEvents)==7
        sprintf('Events are identical across instances, except for at the end of REC as REC stopped at different times across instances.')
    end
end

%read in pulse numbers that were generated by a Matlab script:
switch date
    case '180717_resting_state'
        load('D:\data\180717_B1\180717_data\sync_pulse_resting_state_180717.mat')        
    case '200717_resting_state';
        load('D:\data\200717_resting_state\200717_data\sync_pulse_resting_state_200717_B7.mat')        
    case '210717_resting_state';
        load('D:\data\210717_resting_state\210717_data\sync_pulse_resting_state_210717.mat')         
    case '250717_resting_state';
        load('X:\best\250717_resting_state\250717_resting_state_data\sync_pulse_resting_state_250717.mat')      
    case '260717_resting_state';
        load('D:\data\260717_resting_state\260717_resting_state_data\sync_pulse_resting_state_260717_resting_state.mat')      
    case '090817_resting_state';
        load('X:\best\090817_resting_state\090817_resting_state_data\sync_pulse_resting_state_090817.mat')      
    case '100817_resting_state';
        load('X:\best\100817_resting_state\100817_resting_state_data\sync_pulse_resting_state_100817.mat')      
end
convertedAllBits=2.^allBits;%convert into the code that is saved in the NEV events file by the NSPs

if length(events{5})~=length(convertedAllBits)+1
    sprintf('Events are not identical between MAT and NEV files. Check and debug.')
end
%check that numbers match (NEV events should have 1 extra number at the end, compared to MAT events):
isequal(events{5}(1:end-1),convertedAllBits')
if length(events{5})>length(convertedAllBits)
    isequal(events{5}(1:length(convertedAllBits)),convertedAllBits')
elseif length(events{5})<length(convertedAllBits)
    isequal(events{5}(1:end),convertedAllBits(1:length(events{5}))')
end
for instanceInd=1:length(events)
    lengthEvents(instanceInd)=length(events{instanceInd});
end
sharedInd=min(lengthEvents)

%load data from ns6 files and remove data at the beginning and end of
%recording on that particular instance, to align data across all instances:
alignData=1;
if alignData==1
    for instanceInd=1:8
        instanceName=['instance',num2str(instanceInd)];
        instanceNEVFileName=['X:\best\',date,'\',instanceName,'.nev'];
        NEV=openNEV(instanceNEVFileName);
        instanceNS6FileName=['X:\best\',date,'\',instanceName,'.ns6'];
        startShared=NEV.Data.SerialDigitalIO.TimeStamp(1);
        stopShared=NEV.Data.SerialDigitalIO.TimeStamp(sharedInd);
        NSch=openNSx(instanceNS6FileName,'read');
        NSchOriginal=NSch.Data;
        if instanceInd==1
            eyeData.XPos=NSchOriginal(129,startShared:stopShared);
            eyeData.YPos=NSchOriginal(130,startShared:stopShared);
            eyeData.XDiam=NSchOriginal(131,startShared:stopShared);
            eyeData.YDiam=NSchOriginal(132,startShared:stopShared);
            save(['X:\best\',date,'\eye_data.mat'],'eyeData');
        end
        NSchNew=NSch.Data(1:128,startShared:stopShared);
        NSch.Data=NSchNew;
        NSch.MetaTags.ChannelID=[1:128]';
        NSch.MetaTags.ChannelCount=128;
        newInstanceNS6FileName=['X:\best\',date,'\',instanceName,'_aligned.ns6']
        saveNSx2(NSch,newInstanceNS6FileName);
        pause(20)
        clear NSch NSchOriginal NEV startShared stopShared
    end
end